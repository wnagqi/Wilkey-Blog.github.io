<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>maven相关学习</title>
      <link href="/2022/11/14/maven%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/11/14/maven%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java后端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之图</title>
      <link href="/2022/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/"/>
      <url>/2022/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><p>图G由顶点集V和边集E组成，记为G&#x3D;(V,E)，其中V(G)表示图G中顶点的有限集；E(G)表示图G中顶点之间的关系（边）集合。若V&#x3D;{v1.v2….,vn}，则用|V|表示图G中顶点的个数，也称图G的阶，E&#x3D;{(u,v)|u∈V，v∈V}，用|E|表示图G中边的条数。</p><p>注意：线性表可以是空表，树可以是空树，但是图不可以是空，即V一定是非空集。</p><p><img src="/2022/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/1668148187155.png" alt="1668148187155"></p><h2 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h2><p><img src="/2022/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/1668148294907.png" alt="1668148294907"></p><h2 id="图的分类"><a href="#图的分类" class="headerlink" title="图的分类"></a>图的分类</h2><ul><li><p><strong>无向图</strong></p><p>顶点v的度：依附于该顶点的边的条数，记为TD(v)。</p><p> <img src="/2022/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/1668148777129.png" alt="1668148777129"></p></li><li><p><strong>有向图</strong></p><p>入度：以顶点v为终点的有向边的数目，记为ID(v)</p><p>出度：以顶点v为起点的有向边的数目，记为OD(v)</p><p>顶点v的度：其入度和出度之和，TD(v) &#x3D; ID(v) +  OD(v)</p><p><img src="/2022/11/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%9B%BE/1668153808046.png" alt="1668153808046"></p></li><li><p><strong>简单图</strong></p></li><li><p><strong>多重图</strong></p><p>路径：顶点vp到顶点vq之间的一条路径是指顶点序列。</p><p>回路：第一个顶点到最后一个顶点相同的路径</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之树</title>
      <link href="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/"/>
      <url>/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><ol><li><p>先序遍历：根左右</p></li><li><p>中序遍历：左根右</p></li><li><p>后续遍历：左右根</p><p><strong>遍历顺序取决于根的位置。</strong></p><ul><li><strong>树的定义：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTNode;</span><br></pre></td></tr></table></figure><ul><li><strong>先序遍历：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T != null)&#123;</span><br><span class="line">visit(T);<span class="comment">// 访问根节点</span></span><br><span class="line">PreOrder(T-&gt;lchild);<span class="comment">// 递归遍历左子树</span></span><br><span class="line">PreOrder(T-&gt;rchild);<span class="comment">// 递归遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668127654025.png" alt="1668127654025"></p></li></ol><p><strong>注：</strong>先序遍历递归调用：先访问根节点数据，再访问左节点数据，<strong>递归在于持续访问左节点数据（此时函数调用栈的栈针指向的一直是<code>PreOrder(T-&gt;lchild)</code>对应的地址栏，即126行）直到无左节点，此时程序接下去运行，函数调用栈地址栏指向127行，即开始访问右节点；</strong>当没有右节点时<code>（T == null)</code>，函数调用栈抛出<code>T == null</code>对应的栈针，开始向上返回。</p><ul><li><strong>求树的深度</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">treeDepth</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T == null)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> l = treeDepth(T-&gt;lchild);</span><br><span class="line">        <span class="type">int</span> r = treeDepth(T-&gt;rchild);</span><br><span class="line">        <span class="comment">// 树的深度=Max（左子树深度，右子树深度）+ 1;</span></span><br><span class="line">        <span class="keyword">return</span> l &gt; r ? l+<span class="number">1</span> : r+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h2><p><img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668127755770.png" alt="1668127755770"></p><p>算法思想：</p><ul><li><p>初始化一个辅助队列</p></li><li><p>根节点入队</p></li><li><p>若队列非空，则队头结点出队，访问该节点，并将其左右结点插入队尾（如果有的话）</p></li><li><p>重复上述步骤直至队列为空</p><ul><li><strong>层序遍历</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">    LinkQueue Q;</span><br><span class="line">    InitQueue(Q);<span class="comment">// 初始化一个辅助队列</span></span><br><span class="line">    BiTree p;</span><br><span class="line">    EnQueue(Q,T);<span class="comment">// 将根节点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;<span class="comment">// 队列不空则循环</span></span><br><span class="line">        DeQueue(Q,p);<span class="comment">// 取出队头结点</span></span><br><span class="line">        visit(p);<span class="comment">// 访问结点</span></span><br><span class="line">        <span class="keyword">if</span>(p -&gt; lchild != null)&#123;</span><br><span class="line">            EnQueue(Q,p -&gt;lchild); <span class="comment">// 左子节点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p -&gt; rchild != null)&#123;</span><br><span class="line">            EnQueue(Q,p -&gt;rchild); <span class="comment">// 右子节点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过遍历序列构建二叉树"><a href="#通过遍历序列构建二叉树" class="headerlink" title="通过遍历序列构建二叉树"></a>通过遍历序列构建二叉树</h2></li></ul><p><img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668127701065.png" alt="1668127701065"></p><p><strong>一定要有中序序列才能确定唯一的二叉树</strong></p><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p> n个结点的二叉树，有n+1个空链域！可用来记录前驱、后继的信息。</p><p><img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668127782753.png" alt="1668127782753"></p><p>根据遍历序列确定前驱、后继。指向前驱、后继的指针称为“线索”。</p><p>线索二叉树找结点的前驱、后继更方便，遍历也更方便，可以从任意一个结点出发做遍历操作。</p><p><strong>定义线索二叉树：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line">strcut ThreadNode *lchild,*rchild;</span><br><span class="line"><span class="type">int</span> ltag,rtag;</span><br><span class="line">&#125;ThreadNode,*ThreadTree;</span><br></pre></td></tr></table></figure><p><strong>tag &#x3D;&#x3D; 0，表示指针指向孩子；</strong></p><p><strong>tag &#x3D;&#x3D;1，表示指针是线索。</strong></p><p><img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668127808096.png" alt="1668127808096"></p><h2 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h2><ol><li><strong>双亲表示法</strong></li></ol><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><ul><li><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4></li></ul><p><strong>结点的权：</strong>有某种现实含义的数值（如：表示结点的重要性等）</p><p><strong>结点的带权路径长度：</strong>从树的根到该结点的路径长度（经过的边数）与该结点上权值的乘机。</p><p><strong>树的带权路径长度：</strong>树中所有叶子结点的带权路径长度之和。</p><p><strong>哈夫曼树（最优二叉树）：</strong></p><p>​在含有n个带权叶结点的二叉树中，其中带权路径长度（WPL）最小的二叉树就是哈夫曼树。</p><ul><li><h4 id="哈夫曼树的构造"><a href="#哈夫曼树的构造" class="headerlink" title="哈夫曼树的构造"></a><strong>哈夫曼树的构造</strong></h4><p>给定n个权值不同的结点，构造哈夫曼树的算法描述：</p><ol><li>将这n个结点看做仅含有一个结点的二叉树，构成森林F。</li><li>从F中选择权重最小的两个结点作为新结点的左右子树，新结点的权重为左右子树权重之和，构成一颗新的树。</li><li>从F中删去两个已经作为子树的独立结点，同时将新生成的树放入F中</li><li>重复步骤2和3，直到F中只剩一颗树为止</li></ol></li></ul><p><img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668129357809.png" alt="1668129357809"></p><p><img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668129405861.png" alt="1668129405861"></p><ul><li><h4 id="哈夫曼树的性质"><a href="#哈夫曼树的性质" class="headerlink" title="哈夫曼树的性质"></a>哈夫曼树的性质</h4><ol><li>每个初始结点最终都成为叶结点，且权重越小的结点到根节点的路径长度越大</li><li>哈夫曼树的结点总数为2n-1</li><li>哈夫曼树种不存在度为1的结点</li><li>哈夫曼树并不唯一，但WPL必然相同且为最优</li></ol></li></ul><h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p> 用哈夫曼树得到哈夫曼编码——字符集中的每个字符作为一个叶子结点，各个字符出现的<strong>频度</strong>作为结点的<strong>权值</strong>，构造哈夫曼树。</p><p>固定编码长度：每个字符用相等长度的二进制表示。</p><p><strong>可变长度编码：</strong>允许对不同字符用不等长的二进制位表示</p><p><strong>前缀编码：</strong>若没有一个编码是另一个编码的前缀</p><p><img src="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/1668136280543.png" alt="1668136280543"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
