<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构之树</title>
      <link href="/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/"/>
      <url>/2022/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><ol><li><p>先序遍历：根左右</p></li><li><p>中序遍历：左根右</p></li><li><p>后续遍历：左右根</p><p>&#x3D;&#x3D;遍历顺序取决于根的位置。&#x3D;&#x3D;</p><ul><li><strong>树的定义：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTNode,*BiTNode;</span><br></pre></td></tr></table></figure><ul><li><strong>先序遍历：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T != null)&#123;</span><br><span class="line">visit(T);<span class="comment">// 访问根节点</span></span><br><span class="line">PreOrder(T-&gt;lchild);<span class="comment">// 递归遍历左子树</span></span><br><span class="line">PreOrder(T-&gt;rchild);<span class="comment">// 递归遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\qiwan\AppData\Roaming\Typora\typora-user-images\1667976750010.png" alt="1667976750010"></p></li></ol><p><strong>注：</strong>先序遍历递归调用：先访问根节点数据，再访问左节点数据，&#x3D;&#x3D;递归在于持续访问左节点数据（此时函数调用栈的栈针指向的一直是<code>PreOrder(T-&gt;lchild)</code>对应的地址栏，即126行）直到无左节点，此时程序接下去运行，函数调用栈地址栏指向127行，即开始访问右节点；&#x3D;&#x3D;当没有右节点时<code>（T == null)</code>，函数调用栈抛出<code>T == null</code>对应的栈针，开始向上返回。</p><ul><li><strong>求树的深度</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">treeDepth</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T == null)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> l = treeDepth(T-&gt;lchild);</span><br><span class="line">        <span class="type">int</span> r = treeDepth(T-&gt;rchild);</span><br><span class="line">        <span class="comment">// 树的深度=Max（左子树深度，右子树深度）+ 1;</span></span><br><span class="line">        <span class="keyword">return</span> l &gt; r ? l+<span class="number">1</span> : r+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h2><p><img src="C:\Users\qiwan\AppData\Roaming\Typora\typora-user-images\1667981452475.png" alt="1667981452475"></p><p>算法思想：</p><ul><li><p>初始化一个辅助队列</p></li><li><p>根节点入队</p></li><li><p>若队列非空，则队头结点出队，访问该节点，并将其左右结点插入队尾（如果有的话）</p></li><li><p>重复上述步骤直至队列为空</p><ul><li><strong>层序遍历</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">    LinkQueue Q;</span><br><span class="line">    InitQueue(Q);<span class="comment">// 初始化一个辅助队列</span></span><br><span class="line">    BiTree p;</span><br><span class="line">    EnQueue(Q,T);<span class="comment">// 将根节点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;<span class="comment">// 队列不空则循环</span></span><br><span class="line">        DeQueue(Q,p);<span class="comment">// 取出队头结点</span></span><br><span class="line">        visit(p);<span class="comment">// 访问结点</span></span><br><span class="line">        <span class="keyword">if</span>(p -&gt; lchild != null)&#123;</span><br><span class="line">            EnQueue(Q,p -&gt;lchild); <span class="comment">// 左子节点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p -&gt; rchild != null)&#123;</span><br><span class="line">            EnQueue(Q,p -&gt;rchild); <span class="comment">// 右子节点入队</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过遍历构建二叉树"><a href="#通过遍历构建二叉树" class="headerlink" title="通过遍历构建二叉树"></a>通过遍历构建二叉树</h2></li></ul><p><img src="C:\Users\qiwan\AppData\Roaming\Typora\typora-user-images\1668041132043.png" alt="1668041132043"></p><p>&#x3D;&#x3D;一定要有中序序列才能确定唯一的二叉树&#x3D;&#x3D;</p><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p> n个结点的二叉树，有n+1个空链域！可用来记录前驱、后继的信息。</p><p><img src="C:\Users\qiwan\AppData\Roaming\Typora\typora-user-images\1668045308312.png" alt="1668045308312"></p><p>根据遍历序列确定前驱、后继。指向前驱、后继的指针称为“线索”。</p><p>线索二叉树找结点的前驱、后继更方便，遍历也更方便，可以从任意一个结点出发做遍历操作。</p><p><strong>定义线索二叉树：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line">strcut ThreadNode *lchild,*rchild;</span><br><span class="line"><span class="type">int</span> ltag,rtag;</span><br><span class="line">&#125;ThreadNode,*ThreadTree;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;tag &#x3D;&#x3D; 0，表示指针指向孩子；&#x3D;&#x3D;</p><p>&#x3D;&#x3D;tag &#x3D;&#x3D;1，表示指针是线索。&#x3D;&#x3D;</p><p><img src="C:\Users\qiwan\AppData\Roaming\Typora\typora-user-images\1668045690382.png" alt="1668045690382"></p><h2 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h2><ol><li><strong>双亲表示法</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/03/hello-world/"/>
      <url>/2022/11/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
